#!/usr/node/bin/node

'use strict';

var exec = require('child_process').exec;
var fs = require('fs');
var https = require('https');

var updateUrl = 'https://raw.github.com/calmh/smartos-ancestry/master/ancestry';
var updateFile = process.argv[1];

function parseVmadmList(stdout, cb) {
    var vms = {};
    var lines = stdout.split('\n');

    lines.forEach(function (line) {
        var fields = line.split(':');
        var uuid = fields[0];
        var alias = fields[1];
        var image_uuid = fields[2] || fields[3];
        if (uuid)
            vms[uuid] = { alias: alias, image_uuid: image_uuid };

    });

    cb(null, vms);
}

function vmadmList(cb) {
    exec('vmadm list -po uuid,alias,image_uuid,disks.0.image_uuid', function (err, stdout, stderr) {
        if (err) {
            throw err;
        }
        parseVmadmList(stdout, cb);
    });
}

function parseImgadmList(stdout, cb) {
    var lines = stdout.split('\n');
    var imgs = {};

    lines.forEach(function (line) {
        var fields = line.split(/ +/);
        var uuid = fields[0];
        if (uuid.match(/^[0-9a-f-]+$/)) {
            imgs[uuid] = { name: fields[1], version: fields[2], os: fields[3], published: fields[4], used: 0 };
        }
    });

    cb(null, imgs);
}

function imgadmList(cb) {
    exec('imgadm list', function (err, stdout, stderr) {
        if (err) {
            throw err;
        }
        parseImgadmList(stdout, cb);
    });
}

function output(vms, imgs) {
    var format = '%-36s  %-12s  %-16s  %-8s';

    if (process.argv.indexOf('-v') !== -1) {
        console.log(sprintf(format, 'UUID', 'ALIAS', 'IMAGE', 'VERSION'));

        var uuids = Object.keys(vms);
        uuids.sort();

        for (var i = 0; i < uuids.length; i++) {
            var uuid = uuids[i];
            var vm = vms[uuid];
            var img = imgs[vm.image_uuid] || {used: 0};
            console.log(sprintf(format, uuid, vm.alias, img.name || '-', img.version || '-'));
        }
    } else if (process.argv.indexOf('-i') !== -1) {
        console.log(sprintf(format, 'UUID', 'NAME', 'VERSION', 'USAGE'));
        for (var uuid in vms) {
            var img = imgs[vms[uuid].image_uuid] || {used: 0};
            img.used += 1;
        }

        var uuids = Object.keys(imgs);
        uuids.sort();

        for (var i = 0; i < uuids.length; i++) {
            var uuid = uuids[i];
            var img = imgs[uuid];
            console.log(sprintf(format, uuid, img.name, img.version, img.used));
        }
    }
}

function update() {
    var buf = '';
    var newFile = updateFile + '.new';

    var req = https.get(updateUrl, function (res) {
        res.on('data', function (data) {
            buf += data;
        });

        res.on('end', function () {
            fs.writeFileSync(newFile, buf);
            fs.chmodSync(newFile, 493 /* 0755 */);
            fs.renameSync(newFile, updateFile);
            console.log('Updated ' + updateFile);
        })
    });

    req.on('error', function (e) {
        console.log('Failed to update: ' + e.message);
    });
}

if (process.argv.indexOf('-u') !== -1) {
    update();
} else if (process.argv.indexOf('-v') === -1 && process.argv.indexOf('-i') === -1) {
    console.log('Usage:');
    console.log('  ancestry -v  # Display VMs and their base');
    console.log('  ancestry -i  # Display images and their usage count');
    console.log('  ancestry -u  # Update ancestry script to latest version');
} else {
    var async = require('/usr/node/node_modules/async.js');
    var sprintf = require('/usr/node/node_modules/sprintf.js').sprintf;

    async.parallel([vmadmList, imgadmList], function (err, res) {
        if (err) {
            throw err;
        }
        output(res[0], res[1]);
    });
}
