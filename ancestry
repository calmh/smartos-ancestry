#!/usr/node/bin/node

"use strict";

var exec = require('child_process').exec;
var sprintf = require('/usr/node/node_modules/sprintf').sprintf;

// -- vmadm list --

function parseVmadmList(stdout, cb) {
    var vms = []
    var lines = stdout.split('\n');

    lines.forEach(function (line) {
        var fields = line.split(':');
        var uuid = fields[0];
        var alias = fields[1];
        var image_uuid = fields[2] || fields[3];
        if (uuid)
            vms[uuid] = { alias: alias, image_uuid: image_uuid };

    });

    cb(null, vms);
}

function vmadmList(cb) {
    exec('vmadm list -po uuid,alias,image_uuid,disks.0.image_uuid', function (err, stdout, stderr) {
        if (err) { throw err; }
        parseVmadmList(stdout, cb);
    });
}

// -- imgadm list --

function parseImgadmList(stdout, cb) {
    var lines = stdout.split('\n');
    var imgs = {};

    lines.forEach(function (line) {
        var fields = line.split(/ +/);
        var uuid = fields[0];
        var os = fields[1];
        var published = fields[2];
        var urn = fields[3];
        if (uuid.match(/^[0-9a-f-]+$/)) {
            imgs[uuid] = { os: os, published: published, urn: urn };
        }
    });

    cb(null, imgs);
}

function imgadmList(cb) {
    exec('imgadm list', function (err, stdout, stderr) {
        if (err) { throw err; }
        parseImgadmList(stdout, cb);
    });
}

// -- vmadm get --

function parseVmadmGet(stdout, imgs, cb) {
    var obj = JSON.parse(stdout);
    var iuuid = obj.image_uuid || obj.disks[0].image_uuid;
    var vmobj = {vm: obj.uuid, alias: obj.alias, img: iuuid, img_name: imgs[iuuid]};
    cb(null, vmobj);
}

function vmadmGet(vm, imgs, cb) {
    exec('vmadm get ' + vm, function (err, stdout, stderr) {
        if (err) { throw err; }
        parseVmadmGet(stdout, imgs, cb);
    });
}

// -- main --

var vms, imgs;

vmadmList(function (err, tvms) {
    if (err) { throw err; }
    vms = tvms;
    if (imgs)
        output(vms, imgs);
});

imgadmList(function (err, timgs) {
    if (err) { throw err; }
    imgs = timgs;
    if (vms)
        output(vms, imgs);
});

function output(vms, imgs) {
    function image(image_uuid) {
        if (!image_uuid || !imgs[image_uuid])
            return {urn: '-', published: '-'};
        return imgs[image_uuid];
    }

    var format = '%-36s  %-16s  %-30s  %-10s';
    console.log(sprintf(format, 'UUID', 'ALIAS', 'IMAGE', 'PUBLISHED'));
    for (var uuid in vms) {
        var img = image(vms[uuid].image_uuid);
        console.log(sprintf(format, uuid, vms[uuid].alias, img.urn, img.published));
    }
}

// vim: set ft=javascript:
